# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N766O1kWDccmNoiRveDMbo2x4SKi9Yn7
"""

# Import library
import pandas as pd
import networkx as nx
import matplotlib.pyplot as plt

# Unggah dataset dari lokal ke Colab
from google.colab import files
uploaded = files.upload()

# Membaca dataset edgelist dan node classes
edgelist_df = pd.read_csv("elliptic_txs_edgelist.csv")
classes_df = pd.read_csv("elliptic_txs_classes.csv")

# Menampilkan sebagian data untuk pemahaman
print("Edgelist Data:\n", edgelist_df.head())
print("\nClasses Data:\n", classes_df.head())

# Membuat graf dari edgelist
G = nx.from_pandas_edgelist(edgelist_df, source='txId1', target='txId2')

# Menambahkan atribut kelas pada node
class_mapping = pd.Series(classes_df['class'].values, index=classes_df['txId']).to_dict()
nx.set_node_attributes(G, class_mapping, name='class')

# Pewarnaan graf menggunakan algoritma pewarnaan
color_map = nx.coloring.greedy_color(G, strategy="largest_first")
print("\nWarna yang diberikan untuk setiap node:\n", color_map)

# Visualisasi graf (opsional, untuk subset kecil)
subgraph = G.subgraph(list(G.nodes())[:50])  # Ambil subset kecil dari graf
node_colors = [color_map[node] if node in color_map else 0 for node in subgraph.nodes()]

plt.figure(figsize=(12, 8))
nx.draw(subgraph, with_labels=False, node_size=50, node_color=node_colors, cmap=plt.cm.tab20)
plt.title("Visualisasi Pewarnaan Graf (Subset)")
plt.show()

# Import library
import networkx as nx
import matplotlib.pyplot as plt

# Inisialisasi graf
G = nx.Graph()

# List karyawan (nodes)
employees = ["bulan", "ayu", "yohani", "trisno", "syahan",
             "raju", "heru", "nopiana", "wely", "laila"]

# Shift kerja per hari untuk setiap karyawan
shifts = {
    "mon": ["pg", "siang", "pg", "siang", "pg", "pg", "siang", "siang", "pg", "off"],
    "tue": ["siang", "pg", "pg", "off", "pg", "siang", "siang", "siang", "pg", "pg"],
    "wed": ["siang", "off", "pg", "pg", "siang", "off", "siang", "siang", "pg", "pg"],
    "thu": ["pg", "siang", "pg", "pg", "siang", "siang", "pg", "siang", "pg", "pg"],
    "fri": ["siang", "pg", "pg", "pg", "siang", "siang", "pg", "off", "off", "pg"],
    "sat": ["siang", "pg", "pg", "pg", "siang", "siang", "pg", "pg", "siang", "pg"],
    "sun": ["pg", "siang", "off", "pg", "siang", "siang", "pg", "pg", "siang", "pg"]
}

# Membuat edges jika ada shift yang sama di hari yang sama
for day in shifts:
    for i in range(len(employees)):
        for j in range(i+1, len(employees)):
            if shifts[day][i] != "off" and shifts[day][i] == shifts[day][j]:
                G.add_edge(employees[i], employees[j])

# Pewarnaan graf dengan algoritma greedy
color_map = nx.coloring.greedy_color(G, strategy="largest_first")

# Konversi warna menjadi daftar warna untuk plotting
colors = ["red", "blue", "green", "orange", "purple", "yellow"]
node_colors = [colors[color_map[node] % len(colors)] for node in G.nodes]

# Visualisasi graf
plt.figure(figsize=(12, 8))
nx.draw(G, with_labels=True, node_color=node_colors, node_size=2000, font_color="black")
plt.title("Pewarnaan Graf Berdasarkan Jadwal Shift Kerja")
plt.show()

# Install library yang diperlukan jika belum ada
!pip install gtts

# Import library
import networkx as nx
import matplotlib.pyplot as plt
from gtts import gTTS
from IPython.display import Audio, display

# Inisialisasi graf
G = nx.Graph()

# List karyawan (nodes)
employees = ["bulan", "ayu", "yohani", "trisno", "syahan",
             "raju", "heru", "nopiana", "wely", "laila"]

# Shift kerja per hari untuk setiap karyawan
shifts = {
    "mon": ["pg", "siang", "pg", "siang", "pg", "pg", "siang", "siang", "pg", "off"],
    "tue": ["siang", "pg", "pg", "off", "pg", "siang", "siang", "siang", "pg", "pg"],
    "wed": ["siang", "off", "pg", "pg", "siang", "off", "siang", "siang", "pg", "pg"],
    "thu": ["pg", "siang", "pg", "pg", "siang", "siang", "pg", "siang", "pg", "pg"],
    "fri": ["siang", "pg", "pg", "pg", "siang", "siang", "pg", "off", "off", "pg"],
    "sat": ["siang", "pg", "pg", "pg", "siang", "siang", "pg", "pg", "siang", "pg"],
    "sun": ["pg", "siang", "off", "pg", "siang", "siang", "pg", "pg", "siang", "pg"]
}

# Membuat edges jika ada shift yang sama di hari yang sama
for day in shifts:
    for i in range(len(employees)):
        for j in range(i+1, len(employees)):
            if shifts[day][i] != "off" and shifts[day][i] == shifts[day][j]:
                G.add_edge(employees[i], employees[j])

# Pewarnaan graf dengan algoritma greedy
color_map = nx.coloring.greedy_color(G, strategy="largest_first")

# Daftar warna yang akan digunakan
colors = ["red", "blue", "green", "orange", "purple", "yellow"]

# Assign warna ke nodes
node_colors = [colors[color_map[node] % len(colors)] for node in G.nodes]

# Visualisasi graf
plt.figure(figsize=(12, 8))
nx.draw(G, with_labels=True, node_color=node_colors, node_size=2000, font_color="black", font_size=12)
plt.title("Pewarnaan Graf Berdasarkan Jadwal Shift Kerja")
plt.show()

# Interpretasi hasil graf
interpretation = """
Graf ini menunjukkan pembagian jadwal shift kerja dari hari Senin hingga Minggu.
Setiap simpul merepresentasikan seorang karyawan. Jika dua karyawan bekerja pada shift yang sama,
maka terdapat garis penghubung antara simpul mereka. Pewarnaan graf memastikan bahwa dua simpul yang terhubung memiliki warna berbeda.
Sebagai contoh, karyawan dengan shift pagi, siang, atau off, diberi warna yang berbeda sesuai hasil algoritma greedy.
"""

# Konversi interpretasi ke suara menggunakan gTTS
tts = gTTS(text=interpretation, lang="id")
tts.save("graf_interpretasi.mp3")

# Putar suara interpretasi
display(Audio("graf_interpretasi.mp3", autoplay=True))

# Install library yang diperlukan jika belum ada
!pip install gtts

# Import library
import networkx as nx
import matplotlib.pyplot as plt
from gtts import gTTS
from IPython.display import Audio, display

# Inisialisasi graf
G = nx.Graph()

# List karyawan (nodes)
employees = ["bulan", "ayu", "yohani", "trisno", "syahan",
             "raju", "heru", "nopiana", "wely", "laila"]

# Shift kerja per hari untuk setiap karyawan
shifts = {
    "mon": ["pg", "siang", "pg", "siang", "pg", "pg", "siang", "siang", "pg", "off"],
    "tue": ["siang", "pg", "pg", "off", "pg", "siang", "siang", "siang", "pg", "pg"],
    "wed": ["siang", "off", "pg", "pg", "siang", "off", "siang", "siang", "pg", "pg"],
    "thu": ["pg", "siang", "pg", "pg", "siang", "siang", "pg", "siang", "pg", "pg"],
    "fri": ["siang", "pg", "pg", "pg", "siang", "siang", "pg", "off", "off", "pg"],
    "sat": ["siang", "pg", "pg", "pg", "siang", "siang", "pg", "pg", "siang", "pg"],
    "sun": ["pg", "siang", "off", "pg", "siang", "siang", "pg", "pg", "siang", "pg"]
}

# Membuat edges jika ada shift yang sama di hari yang sama
for day in shifts:
    for i in range(len(employees)):
        for j in range(i+1, len(employees)):
            if shifts[day][i] != "off" and shifts[day][i] == shifts[day][j]:
                G.add_edge(employees[i], employees[j])

# Pewarnaan graf dengan algoritma greedy
color_map = nx.coloring.greedy_color(G, strategy="largest_first")

# Daftar warna yang akan digunakan
colors = ["red", "blue", "green", "orange", "purple", "yellow", "pink", "brown"]

# Assign warna ke nodes
node_colors = [colors[color_map[node] % len(colors)] for node in G.nodes]

# Visualisasi graf
plt.figure(figsize=(12, 8))
nx.draw(G, with_labels=True, node_color=node_colors, node_size=2000, font_color="black", font_size=12)
plt.title("Pewarnaan Graf Berdasarkan Jadwal Shift Kerja")
plt.show()

# Menampilkan simpul-simpul dengan warna yang sama
color_groups = {}
for node, color in color_map.items():
    if color not in color_groups:
        color_groups[color] = []
    color_groups[color].append(node)

# Hitung jumlah warna yang dihasilkan
total_colors = len(color_groups)

# Cetak hasil pengelompokan simpul berdasarkan warna
print("Simpul-simpul dengan warna yang sama:")
group_text = ""
for color, nodes in color_groups.items():
    group_text += f"- Warna {colors[color % len(colors)]}: {', '.join(nodes)}\n"
    print(f"- Warna {colors[color % len(colors)]}: {', '.join(nodes)}")

# Cetak jumlah warna yang dihasilkan
print(f"\nTotal warna yang dihasilkan: {total_colors}")
group_text += f"\nTotal warna yang dihasilkan: {total_colors}"

# Tambahkan interpretasi dalam bentuk suara
interpretation = """
Graf ini menunjukkan pewarnaan simpul berdasarkan jadwal shift kerja.
Berikut adalah daftar simpul-simpul yang memiliki warna yang sama dan jumlah total warna yang digunakan:
""" + group_text

# Konversi interpretasi ke suara menggunakan gTTS
tts = gTTS(text=interpretation, lang="id")
tts.save("graf_interpretasi.mp3")

# Putar suara interpretasi
display(Audio("graf_interpretasi.mp3", autoplay=True))